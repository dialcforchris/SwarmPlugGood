// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/SwarmingPrivatePCH.h"
#include "Swarming.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeSwarming() {}
	void USwarmingBPLibrary::StaticRegisterNativesUSwarmingBPLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(USwarmingBPLibrary::StaticClass(),"Alignment",(Native)&USwarmingBPLibrary::execAlignment);
		FNativeFunctionRegistrar::RegisterFunction(USwarmingBPLibrary::StaticClass(),"ApplyBasicSwarming",(Native)&USwarmingBPLibrary::execApplyBasicSwarming);
		FNativeFunctionRegistrar::RegisterFunction(USwarmingBPLibrary::StaticClass(),"Cohesion",(Native)&USwarmingBPLibrary::execCohesion);
		FNativeFunctionRegistrar::RegisterFunction(USwarmingBPLibrary::StaticClass(),"ConeTrace",(Native)&USwarmingBPLibrary::execConeTrace);
		FNativeFunctionRegistrar::RegisterFunction(USwarmingBPLibrary::StaticClass(),"CreateSwarm",(Native)&USwarmingBPLibrary::execCreateSwarm);
		FNativeFunctionRegistrar::RegisterFunction(USwarmingBPLibrary::StaticClass(),"GetDistance",(Native)&USwarmingBPLibrary::execGetDistance);
		FNativeFunctionRegistrar::RegisterFunction(USwarmingBPLibrary::StaticClass(),"Separation",(Native)&USwarmingBPLibrary::execSeparation);
		FNativeFunctionRegistrar::RegisterFunction(USwarmingBPLibrary::StaticClass(),"SwarmingSampleFunction",(Native)&USwarmingBPLibrary::execSwarmingSampleFunction);
	}
	IMPLEMENT_CLASS(USwarmingBPLibrary, 584176500);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();

	SWARMING_API class UFunction* Z_Construct_UFunction_USwarmingBPLibrary_Alignment();
	SWARMING_API class UFunction* Z_Construct_UFunction_USwarmingBPLibrary_ApplyBasicSwarming();
	SWARMING_API class UFunction* Z_Construct_UFunction_USwarmingBPLibrary_Cohesion();
	SWARMING_API class UFunction* Z_Construct_UFunction_USwarmingBPLibrary_ConeTrace();
	SWARMING_API class UFunction* Z_Construct_UFunction_USwarmingBPLibrary_CreateSwarm();
	SWARMING_API class UFunction* Z_Construct_UFunction_USwarmingBPLibrary_GetDistance();
	SWARMING_API class UFunction* Z_Construct_UFunction_USwarmingBPLibrary_Separation();
	SWARMING_API class UFunction* Z_Construct_UFunction_USwarmingBPLibrary_SwarmingSampleFunction();
	SWARMING_API class UClass* Z_Construct_UClass_USwarmingBPLibrary_NoRegister();
	SWARMING_API class UClass* Z_Construct_UClass_USwarmingBPLibrary();
	SWARMING_API class UPackage* Z_Construct_UPackage_Swarming();
	UFunction* Z_Construct_UFunction_USwarmingBPLibrary_Alignment()
	{
		struct SwarmingBPLibrary_eventAlignment_Parms
		{
			AActor* act;
			AActor* agent;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USwarmingBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Alignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(SwarmingBPLibrary_eventAlignment_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SwarmingBPLibrary_eventAlignment_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_agent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("agent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(agent, SwarmingBPLibrary_eventAlignment_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_act = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("act"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(act, SwarmingBPLibrary_eventAlignment_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Swarming"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Alignment"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Flocking Swarm AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SwarmingBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USwarmingBPLibrary_ApplyBasicSwarming()
	{
		struct SwarmingBPLibrary_eventApplyBasicSwarming_Parms
		{
			float EventTick;
			TArray<AActor*> swarmArray;
			bool canFly;
			TArray<FVector> velocityArray;
			float separationWeight;
			float alignmentWeight;
			float cohesionWeight;
			bool separationOn;
			bool alignmentOn;
			bool cohesionOn;
		};
		UObject* Outer=Z_Construct_UClass_USwarmingBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ApplyBasicSwarming"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(SwarmingBPLibrary_eventApplyBasicSwarming_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(cohesionOn, SwarmingBPLibrary_eventApplyBasicSwarming_Parms, bool);
			UProperty* NewProp_cohesionOn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("cohesionOn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(cohesionOn, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(cohesionOn, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(alignmentOn, SwarmingBPLibrary_eventApplyBasicSwarming_Parms, bool);
			UProperty* NewProp_alignmentOn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("alignmentOn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(alignmentOn, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(alignmentOn, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(separationOn, SwarmingBPLibrary_eventApplyBasicSwarming_Parms, bool);
			UProperty* NewProp_separationOn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("separationOn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(separationOn, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(separationOn, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), sizeof(bool), true);
			UProperty* NewProp_cohesionWeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("cohesionWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(cohesionWeight, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), 0x0000000000000080);
			UProperty* NewProp_alignmentWeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("alignmentWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(alignmentWeight, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), 0x0000000000000080);
			UProperty* NewProp_separationWeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("separationWeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(separationWeight, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), 0x0000000000000080);
			UProperty* NewProp_velocityArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("velocityArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(velocityArray, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), 0x0000000000000180);
			UProperty* NewProp_velocityArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_velocityArray, TEXT("velocityArray"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(canFly, SwarmingBPLibrary_eventApplyBasicSwarming_Parms, bool);
			UProperty* NewProp_canFly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("canFly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(canFly, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(canFly, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), sizeof(bool), true);
			UProperty* NewProp_swarmArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("swarmArray"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(swarmArray, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), 0x0000000000000080);
			UProperty* NewProp_swarmArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_swarmArray, TEXT("swarmArray"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_EventTick = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventTick"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(EventTick, SwarmingBPLibrary_eventApplyBasicSwarming_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Insect Swarming"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_alignmentOn"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_alignmentWeight"), TEXT("0.100000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_cohesionOn"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_cohesionWeight"), TEXT("0.100000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_separationOn"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_separationWeight"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Apply Boids"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Flocking Swarm AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SwarmingBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USwarmingBPLibrary_Cohesion()
	{
		struct SwarmingBPLibrary_eventCohesion_Parms
		{
			AActor* act;
			AActor* agent;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USwarmingBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Cohesion"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(SwarmingBPLibrary_eventCohesion_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SwarmingBPLibrary_eventCohesion_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_agent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("agent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(agent, SwarmingBPLibrary_eventCohesion_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_act = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("act"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(act, SwarmingBPLibrary_eventCohesion_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Swarming"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Cohesion"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Flocking Swarm AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SwarmingBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USwarmingBPLibrary_ConeTrace()
	{
		struct SwarmingBPLibrary_eventConeTrace_Parms
		{
			AActor* act;
			float radius;
			float traceLength;
			bool renderConeTrace;
			bool canFly;
			FHitResult ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USwarmingBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ConeTrace"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(SwarmingBPLibrary_eventConeTrace_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SwarmingBPLibrary_eventConeTrace_Parms), 0x0000008000000580, Z_Construct_UScriptStruct_FHitResult());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(canFly, SwarmingBPLibrary_eventConeTrace_Parms, bool);
			UProperty* NewProp_canFly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("canFly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(canFly, SwarmingBPLibrary_eventConeTrace_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(canFly, SwarmingBPLibrary_eventConeTrace_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(renderConeTrace, SwarmingBPLibrary_eventConeTrace_Parms, bool);
			UProperty* NewProp_renderConeTrace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("renderConeTrace"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(renderConeTrace, SwarmingBPLibrary_eventConeTrace_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(renderConeTrace, SwarmingBPLibrary_eventConeTrace_Parms), sizeof(bool), true);
			UProperty* NewProp_traceLength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("traceLength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(traceLength, SwarmingBPLibrary_eventConeTrace_Parms), 0x0000000000000080);
			UProperty* NewProp_radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(radius, SwarmingBPLibrary_eventConeTrace_Parms), 0x0000000000000080);
			UProperty* NewProp_act = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("act"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(act, SwarmingBPLibrary_eventConeTrace_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Swarming"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_canFly"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_radius"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_renderConeTrace"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_traceLength"), TEXT("200.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Cone Trace"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Flocking Swarm AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SwarmingBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USwarmingBPLibrary_CreateSwarm()
	{
		struct SwarmingBPLibrary_eventCreateSwarm_Parms
		{
			UClass* agentClass;
			bool canFly;
			int32 swarmSize;
			float minMaxX;
			float minMaxY;
			float maxZ;
			TArray<AActor*> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USwarmingBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateSwarm"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(SwarmingBPLibrary_eventCreateSwarm_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, SwarmingBPLibrary_eventCreateSwarm_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_maxZ = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("maxZ"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(maxZ, SwarmingBPLibrary_eventCreateSwarm_Parms), 0x0000000000000080);
			UProperty* NewProp_minMaxY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("minMaxY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(minMaxY, SwarmingBPLibrary_eventCreateSwarm_Parms), 0x0000000000000080);
			UProperty* NewProp_minMaxX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("minMaxX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(minMaxX, SwarmingBPLibrary_eventCreateSwarm_Parms), 0x0000000000000080);
			UProperty* NewProp_swarmSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("swarmSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(swarmSize, SwarmingBPLibrary_eventCreateSwarm_Parms), 0x0000000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(canFly, SwarmingBPLibrary_eventCreateSwarm_Parms, bool);
			UProperty* NewProp_canFly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("canFly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(canFly, SwarmingBPLibrary_eventCreateSwarm_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(canFly, SwarmingBPLibrary_eventCreateSwarm_Parms), sizeof(bool), true);
			UProperty* NewProp_agentClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("agentClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(agentClass, SwarmingBPLibrary_eventCreateSwarm_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Swarming"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_maxZ"), TEXT("800.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_minMaxX"), TEXT("1000.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_minMaxY"), TEXT("1000.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_swarmSize"), TEXT("10"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Create Swarm"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Flocking Swarm AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SwarmingBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USwarmingBPLibrary_GetDistance()
	{
		struct SwarmingBPLibrary_eventGetDistance_Parms
		{
			AActor* act;
			AActor* agent;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USwarmingBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDistance"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(SwarmingBPLibrary_eventGetDistance_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SwarmingBPLibrary_eventGetDistance_Parms), 0x0000000000000580);
			UProperty* NewProp_agent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("agent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(agent, SwarmingBPLibrary_eventGetDistance_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_act = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("act"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(act, SwarmingBPLibrary_eventGetDistance_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Swarming"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Distance"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Flocking Swarm AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SwarmingBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USwarmingBPLibrary_Separation()
	{
		struct SwarmingBPLibrary_eventSeparation_Parms
		{
			AActor* act;
			AActor* agent;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USwarmingBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Separation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(SwarmingBPLibrary_eventSeparation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SwarmingBPLibrary_eventSeparation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_agent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("agent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(agent, SwarmingBPLibrary_eventSeparation_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_act = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("act"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(act, SwarmingBPLibrary_eventSeparation_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Swarming"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Separation"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Flocking Swarm AI"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SwarmingBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USwarmingBPLibrary_SwarmingSampleFunction()
	{
		struct SwarmingBPLibrary_eventSwarmingSampleFunction_Parms
		{
			float Param;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USwarmingBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SwarmingSampleFunction"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(SwarmingBPLibrary_eventSwarmingSampleFunction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SwarmingBPLibrary_eventSwarmingSampleFunction_Parms), 0x0000000000000580);
			UProperty* NewProp_Param = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Param"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Param, SwarmingBPLibrary_eventSwarmingSampleFunction_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SwarmingTesting"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Execute Sample function"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Swarming sample test testing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SwarmingBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USwarmingBPLibrary_NoRegister()
	{
		return USwarmingBPLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_USwarmingBPLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Swarming();
			OuterClass = USwarmingBPLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_USwarmingBPLibrary_Alignment());
				OuterClass->LinkChild(Z_Construct_UFunction_USwarmingBPLibrary_ApplyBasicSwarming());
				OuterClass->LinkChild(Z_Construct_UFunction_USwarmingBPLibrary_Cohesion());
				OuterClass->LinkChild(Z_Construct_UFunction_USwarmingBPLibrary_ConeTrace());
				OuterClass->LinkChild(Z_Construct_UFunction_USwarmingBPLibrary_CreateSwarm());
				OuterClass->LinkChild(Z_Construct_UFunction_USwarmingBPLibrary_GetDistance());
				OuterClass->LinkChild(Z_Construct_UFunction_USwarmingBPLibrary_Separation());
				OuterClass->LinkChild(Z_Construct_UFunction_USwarmingBPLibrary_SwarmingSampleFunction());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USwarmingBPLibrary_Alignment()); // 3906790951
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USwarmingBPLibrary_ApplyBasicSwarming()); // 3806748903
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USwarmingBPLibrary_Cohesion()); // 1577201167
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USwarmingBPLibrary_ConeTrace()); // 2313989100
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USwarmingBPLibrary_CreateSwarm()); // 3851125717
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USwarmingBPLibrary_GetDistance()); // 871063803
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USwarmingBPLibrary_Separation()); // 1567090761
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USwarmingBPLibrary_SwarmingSampleFunction()); // 1174842889
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SwarmingBPLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SwarmingBPLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("*      Function library class.\n*      Each function in it is expected to be static and represents blueprint node that can be called in any blueprint.\n*\n*      When declaring function you can define metadata for the node. Key function specifiers will be BlueprintPure and BlueprintCallable.\n*      BlueprintPure - means the function does not affect the owning object in any way and thus creates a node without Exec pins.\n*      BlueprintCallable - makes a function which can be executed in Blueprints - Thus it has Exec pins.\n*      DisplayName - full name of the node, shown when you mouse over the node and in the blueprint drop down menu.\n*                              Its lets you name the node using characters not allowed in C++ function names.\n*      CompactNodeTitle - the word(s) that appear on the node.\n*      Keywords -      the list of keywords that helps you to find node when you search for it using Blueprint drop-down menu.\n*                              Good example is \"Print String\" node which you can find also by using keyword \"log\".\n*      Category -      the category your node will be under in the Blueprint drop-down menu.\n*\n*      For more info on custom blueprint nodes visit documentation:\n*      https://wiki.unrealengine.com/Custom_Blueprint_Node_Creation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USwarmingBPLibrary(Z_Construct_UClass_USwarmingBPLibrary, TEXT("USwarmingBPLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USwarmingBPLibrary);
	UPackage* Z_Construct_UPackage_Swarming()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/Swarming")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0x3547399B;
			Guid.B = 0x935513B3;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
